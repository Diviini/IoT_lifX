// Variables globales
let mediaRecorder;
let audioChunks = [];
let isRecording = false;
let isListening = false;
let wakeWordRecognition;
let commandRecognition;
let currentStream;

// √âl√©ments DOM
const recordBtn = document.getElementById('recordBtn');
const status = document.getElementById('status');
const result = document.getElementById('result');

// Ajout d'un bouton pour activer/d√©sactiver l'√©coute en continu
let listenToggleBtn;

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
    checkMicrophonePermission();
    createListenToggleButton();
    initializeWakeWordDetection();

    // D√©marrer automatiquement l'√©coute H24
    setTimeout(() => {
        startWakeWordListening();
    }, 1000); // D√©lai pour laisser le temps aux permissions
});

function createListenToggleButton() {
    // Cr√©er un bouton pour activer/d√©sactiver l'√©coute en continu
    listenToggleBtn = document.createElement('button');
    listenToggleBtn.innerHTML = 'üõë Arr√™ter l\'√©coute H24';
    listenToggleBtn.className = 'listen-toggle-btn';
    listenToggleBtn.style.cssText = `
        margin-left: 10px;
        padding: 10px 15px;
        background: #f44336;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    `;

    // Ins√©rer le bouton √† c√¥t√© du bouton d'enregistrement
    recordBtn.parentNode.insertBefore(listenToggleBtn, recordBtn.nextSibling);

    listenToggleBtn.addEventListener('click', toggleWakeWordListening);
}

function initializeEventListeners() {
    // Enregistrement vocal
    recordBtn.addEventListener('click', toggleRecording);
}

async function checkMicrophonePermission() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        stream.getTracks().forEach(track => track.stop());
        console.log('‚úÖ Microphone accessible');
    } catch (err) {
        console.warn('‚ö†Ô∏è Microphone non accessible:', err);
        recordBtn.style.opacity = '0.5';
        recordBtn.title = 'Microphone non accessible - Utilisez l\'upload de fichier';
        listenToggleBtn.style.opacity = '0.5';
        listenToggleBtn.disabled = true;
        listenToggleBtn.innerHTML = '‚ùå Micro non accessible';
    }
}

// === D√âTECTION MOT-CL√â (WAKE WORD) ===
function initializeWakeWordDetection() {
    // V√©rifier si l'API Speech Recognition est disponible
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        console.warn('‚ö†Ô∏è Speech Recognition non support√© dans ce navigateur');
        listenToggleBtn.style.opacity = '0.5';
        listenToggleBtn.disabled = true;
        listenToggleBtn.innerHTML = '‚ùå Speech Recognition non support√©';
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    // Configuration pour la d√©tection du mot-cl√©
    wakeWordRecognition = new SpeechRecognition();
    wakeWordRecognition.continuous = true;
    wakeWordRecognition.interimResults = false;
    wakeWordRecognition.lang = 'fr-FR';

    wakeWordRecognition.onresult = function(event) {
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript.toLowerCase().trim();
            console.log('üîç D√©tection:', transcript);

            // V√©rifier si le mot-cl√© est d√©tect√©
            if (isWakeWordDetected(transcript)) {
                console.log('üéØ Mot-cl√© d√©tect√©:', transcript);
                showStatus('üéØ "Ok lampe" d√©tect√©! D√©marrage de l\'enregistrement...', 'success');

                // Arr√™ter temporairement l'√©coute du mot-cl√©
                wakeWordRecognition.stop();

                // D√©marrer l'enregistrement de commande
                setTimeout(() => {
                    startCommandRecording();
                }, 500);

                break;
            }
        }
    };

    wakeWordRecognition.onerror = function(event) {
        console.error('Erreur wake word recognition:', event.error);
        if (event.error === 'not-allowed') {
            showStatus('‚ùå Permission microphone refus√©e pour l\'√©coute H24', 'error');
            stopWakeWordListening();
        } else {
            // Red√©marrer automatiquement en cas d'autres erreurs
            setTimeout(() => {
                if (isListening) {
                    try {
                        wakeWordRecognition.start();
                    } catch (e) {
                        console.log('Tentative de red√©marrage apr√®s erreur...');
                    }
                }
            }, 2000);
        }
    };

    wakeWordRecognition.onend = function() {
        if (isListening) {
            // Red√©marrer automatiquement l'√©coute si elle √©tait active
            setTimeout(() => {
                try {
                    wakeWordRecognition.start();
                } catch (e) {
                    console.log('Red√©marrage automatique de l\'√©coute H24...');
                }
            }, 500);
        }
    };
}

function isWakeWordDetected(transcript) {
    const wakeWords = [
        'ok lampe',
        'okay lampe',
        'ok lamp',
        'lamp',
        'lampe',
        'hey lampe',
        'ok lumi√®re',
        'ok √©clairage'
    ];

    return wakeWords.some(wakeWord =>
        transcript.includes(wakeWord) ||
        transcript.replace(/\s/g, '').includes(wakeWord.replace(/\s/g, ''))
    );
}

function toggleWakeWordListening() {
    if (!isListening) {
        startWakeWordListening();
    } else {
        stopWakeWordListening();
    }
}

function startWakeWordListening() {
    if (!wakeWordRecognition) {
        showStatus('‚ùå Speech Recognition non disponible', 'error');
        return;
    }

    try {
        wakeWordRecognition.start();
        isListening = true;
        listenToggleBtn.innerHTML = 'üõë Arr√™ter l\'√©coute H24';
        listenToggleBtn.style.background = '#f44336';
        showStatus('üëÇ √âcoute H24 activ√©e - Dites "Ok lampe" pour commander', 'listening');
        console.log('üëÇ √âcoute H24 du mot-cl√© activ√©e');
    } catch (err) {
        console.error('Erreur d√©marrage wake word:', err);
        if (err.name === 'InvalidStateError') {
            // Le recognition est d√©j√† en cours, on l'arr√™te d'abord
            wakeWordRecognition.stop();
            setTimeout(() => startWakeWordListening(), 1000);
        }
    }
}

function stopWakeWordListening() {
    if (wakeWordRecognition) {
        wakeWordRecognition.stop();
    }
    isListening = false;
    listenToggleBtn.innerHTML = 'üëÇ R√©activer l\'√©coute H24';
    listenToggleBtn.style.background = '#2196F3';
    showStatus('üîá √âcoute H24 d√©sactiv√©e');
    console.log('üîá √âcoute H24 du mot-cl√© d√©sactiv√©e');
}

// === ENREGISTREMENT DE COMMANDE APR√àS MOT-CL√â ===
async function startCommandRecording() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        currentStream = stream;

        // D√©marrer l'enregistrement automatiquement
        audioChunks = [];

        const options = { mimeType: 'audio/webm' };
        try {
            mediaRecorder = new MediaRecorder(stream, options);
        } catch (err) {
            mediaRecorder = new MediaRecorder(stream);
        }

        mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                audioChunks.push(event.data);
            }
        };

        mediaRecorder.onstop = () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            processAudio(audioBlob, 'voice_command.webm');

            // Arr√™ter le stream
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
                currentStream = null;
            }

            // Red√©marrer l'√©coute du mot-cl√© apr√®s un d√©lai
            setTimeout(() => {
                if (isListening) {
                    try {
                        wakeWordRecognition.start();
                        showStatus('üëÇ √âcoute H24 r√©activ√©e - Dites "Ok lampe" pour commander', 'listening');
                    } catch (e) {
                        console.log('Red√©marrage automatique de l\'√©coute H24...');
                    }
                }
            }, 2000);
        };

        mediaRecorder.onerror = (event) => {
            console.error('Erreur MediaRecorder:', event);
            showStatus('‚ùå Erreur lors de l\'enregistrement', 'error');
        };

        mediaRecorder.start();
        showStatus('üéôÔ∏è √ânoncez votre commande... (arr√™t automatique dans 5s)', 'recording');

        // Arr√™t automatique apr√®s 5 secondes
        setTimeout(() => {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
            }
        }, 5000);

        console.log('üéôÔ∏è Enregistrement de commande d√©marr√©');

    } catch (err) {
        console.error('Erreur acc√®s microphone pour commande:', err);
        showStatus('‚ùå Erreur microphone pour la commande', 'error');

        // Red√©marrer l'√©coute du mot-cl√©
        if (isListening) {
            setTimeout(() => {
                try {
                    wakeWordRecognition.start();
                } catch (e) {
                    console.log('Red√©marrage de l\'√©coute...');
                }
            }, 1000);
        }
    }
}

// === ENREGISTREMENT VOCAL MANUEL (bouton) ===
async function toggleRecording() {
    if (!isRecording) {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            startRecording(stream);
        } catch (err) {
            showStatus('‚ùå Erreur: Microphone non accessible.', 'error');
            console.error('Erreur microphone:', err);
        }
    } else {
        stopRecording();
    }
}

function startRecording(stream) {
    audioChunks = [];

    // Configuration du MediaRecorder
    const options = { mimeType: 'audio/webm' };
    try {
        mediaRecorder = new MediaRecorder(stream, options);
    } catch (err) {
        // Fallback si webm n'est pas support√©
        mediaRecorder = new MediaRecorder(stream);
    }

    mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
            audioChunks.push(event.data);
        }
    };

    mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        processAudio(audioBlob, 'recording.webm');

        // Arr√™ter tous les tracks audio
        stream.getTracks().forEach(track => track.stop());
    };

    mediaRecorder.onerror = (event) => {
        console.error('Erreur MediaRecorder:', event);
        showStatus('‚ùå Erreur lors de l\'enregistrement', 'error');
        resetRecordingState();
    };

    mediaRecorder.start();
    isRecording = true;
    recordBtn.classList.add('recording');
    recordBtn.textContent = '‚èπÔ∏è';
    showStatus('üéôÔ∏è Enregistrement en cours... Cliquez √† nouveau pour arr√™ter');

    console.log('üéôÔ∏è Enregistrement d√©marr√©');
}

function stopRecording() {
    if (mediaRecorder && isRecording) {
        mediaRecorder.stop();
        resetRecordingState();
        showStatus('üîÑ Traitement en cours...', 'loading');
        console.log('‚èπÔ∏è Enregistrement arr√™t√©');
    }
}

function resetRecordingState() {
    isRecording = false;
    recordBtn.classList.remove('recording');
    recordBtn.textContent = 'üéôÔ∏è';
}

// === TRAITEMENT AUDIO ===
async function processAudio(audioBlob, filename) {
    showStatus('üîÑ Transcription et ex√©cution de la commande...', 'loading');

    const formData = new FormData();
    formData.append('audio', audioBlob, filename);

    try {
        const response = await fetch('/process-voice', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.status === 'success') {
            showStatus('‚úÖ Commande ex√©cut√©e avec succ√®s!', 'success');
            showResult(data);
        } else {
            showStatus(`‚ùå Erreur: ${data.error}`, 'error');
            console.error('Erreur serveur:', data);
        }
    } catch (error) {
        showStatus(`‚ùå Erreur de connexion: ${error.message}`, 'error');
        console.error('Erreur r√©seau:', error);
    }

}

// === AFFICHAGE ===
function showStatus(message, type = '') {
    status.className = 'status';
    if (type) {
        status.classList.add(type);
    }

    if (type === 'loading') {
        status.innerHTML = `
            <div class="loader"></div>
            <span style="margin-left: 10px;">${message}</span>
        `;
    } else if (type === 'listening') {
        status.innerHTML = `
            <span style="color: #2196F3; animation: pulse 2s infinite;">üëÇ</span>
            <span style="margin-left: 10px;">${message}</span>
        `;
    } else if (type === 'recording') {
        status.innerHTML = `
            <span style="color: #f44336; animation: pulse 1s infinite;">üéôÔ∏è</span>
            <span style="margin-left: 10px;">${message}</span>
        `;
    } else {
        status.innerHTML = message;
    }

    console.log('Status:', message);
}

function showResult(data) {
    const resultHTML = `
        <h3>üìù Transcription:</h3>
        <p style="font-size: 1.2em; margin-bottom: 15px; font-weight: bold; color: #4CAF50;">
            "${data.transcription}"
        </p>

        <h3>üß† Commande pars√©e:</h3>
        <pre>${JSON.stringify(data.command, null, 2)}</pre>

        <h3>üí° R√©sultat LifX:</h3>
        <pre>${JSON.stringify(data.result, null, 2)}</pre>
    `;

    result.innerHTML = resultHTML;
    result.classList.remove('hidden');

    // Scroll vers les r√©sultats
    result.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

// === GESTION D'ERREURS GLOBALES ===
window.addEventListener('error', function(e) {
    console.error('Erreur JavaScript:', e);
    showStatus('‚ùå Une erreur inattendue s\'est produite', 'error');
});

// Nettoyer les ressources quand la page se ferme
window.addEventListener('beforeunload', function() {
    if (isListening) {
        stopWakeWordListening();
    }
    if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
    }
});
